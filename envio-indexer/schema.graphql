type PaymentLink @entity {
  id: ID!
  linkId: BigInt!
  creator: String!
  title: String!
  price: BigInt!
  totalSales: BigInt!
  maxPerWallet: BigInt!
  expireTimestamp: BigInt!
  createdAt: BigInt!
  purchases: [Purchase!]! @derivedFrom(field: "paymentLink")
}

type Purchase @entity {
  id: ID!
  linkId: BigInt!
  buyer: String!
  amount: BigInt!
  totalPrice: BigInt!
  timestamp: BigInt!
  paymentLink: PaymentLink!
}

type Raffle @entity {
  id: ID!
  raffleId: BigInt!
  creator: String!
  title: String!
  rewardType: Int!
  rewardTokenAddress: String!
  rewardAmount: BigInt!
  ticketPrice: BigInt!
  maxTickets: BigInt!
  maxTicketsPerWallet: BigInt!
  expirationTimestamp: BigInt!
  autoDistributeOnSoldOut: Boolean!
  createdAt: BigInt!
  isEnded: Boolean!
  winner: String
  tickets: [Ticket!]! @derivedFrom(field: "raffle")
}

type Ticket @entity {
  id: ID!
  raffleId: BigInt!
  buyer: String!
  amount: BigInt!
  timestamp: BigInt!
  raffle: Raffle!
}

type ERC20Transfer @entity {
  id: ID!
  tokenAddress: String!
  from: String!
  to: String!
  value: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  token: Token!
}

type Token @entity {
  id: ID! # token address
  address: String!
  name: String
  symbol: String
  decimals: Int
  totalSupply: BigInt
  transfers: [ERC20Transfer!]! @derivedFrom(field: "token")
}

type UserTokenBalance @entity {
  id: ID! # user_address + token_address
  userAddress: String!
  tokenAddress: String!
  balance: BigInt!
  token: Token!
  lastUpdated: BigInt!
} 