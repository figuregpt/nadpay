const { ethers } = require("hardhat");
require("dotenv").config({ path: './nadpay/.env' });

async function main() {
  console.log("üîç SIMPLE RAFFLE STATE ANALYSIS");
  console.log("=".repeat(50));
  
  const provider = new ethers.JsonRpcProvider("https://testnet-rpc.monad.xyz");
  const privateKey = process.env.PRIVATE_KEY;
  const wallet = new ethers.Wallet(privateKey, provider);
  
  const contractAddress = "0xa874905B117242eC6c966E35B18985e9242Bb633";
  const abi = [
    "function getTotalRaffles() external view returns (uint256)",
    "function getRaffle(uint256 raffleId) external view returns (tuple(uint256 id, address creator, string title, string description, uint8 rewardType, address rewardTokenAddress, uint256 rewardAmount, uint256 ticketPrice, address ticketPaymentToken, uint256 maxTickets, uint256 ticketsSold, uint256 totalEarned, uint256 expirationTime, bool autoDistributeOnSoldOut, address winner, uint8 status, bool rewardClaimed, uint256 createdAt))"
  ];
  
  const contract = new ethers.Contract(contractAddress, abi, wallet);
  
  console.log("üéØ Contract:", contractAddress);
  console.log("");
  
  // Get total raffles
  const totalRaffles = await contract.getTotalRaffles();
  console.log(`üìä Total Raffles Ever Created: ${totalRaffles}`);
  console.log("");
  
  // Analyze all raffles
  const currentTime = Math.floor(Date.now() / 1000);
  
  const raffleStates = {
    active: [],
    expired_no_winner: [],
    finished: [],
    cancelled: [],
    no_tickets: []
  };
  
  console.log("üîç Analyzing all 19 raffles...");
  
  for (let i = 0; i < totalRaffles; i++) {
    try {
      const raffle = await contract.getRaffle(i);
      
      const isExpired = currentTime >= Number(raffle.expirationTime);
      const hasTickets = Number(raffle.ticketsSold) > 0;
      const hasWinner = raffle.winner !== '0x0000000000000000000000000000000000000000';
      const status = Number(raffle.status);
      
      const raffleInfo = {
        id: i,
        title: raffle.title.length > 30 ? raffle.title.substring(0, 30) + '...' : raffle.title,
        ticketsSold: Number(raffle.ticketsSold),
        maxTickets: Number(raffle.maxTickets),
        hasWinner: hasWinner,
        status: status,
        isExpired: isExpired,
        winner: raffle.winner,
        expirationDate: new Date(Number(raffle.expirationTime) * 1000).toLocaleDateString()
      };
      
      if (status === 2) {
        raffleStates.cancelled.push(raffleInfo);
      } else if (!hasTickets) {
        raffleStates.no_tickets.push(raffleInfo);
      } else if (hasWinner) {
        raffleStates.finished.push(raffleInfo);
      } else if (isExpired) {
        raffleStates.expired_no_winner.push(raffleInfo);
      } else {
        raffleStates.active.push(raffleInfo);
      }
      
    } catch (error) {
      console.log(`‚ùå Error checking raffle ${i}:`, error.message);
    }
  }
  
  console.log("");
  console.log("üìä RAFFLE STATE BREAKDOWN:");
  console.log("‚îÅ".repeat(50));
  
  console.log(`üü¢ ACTƒ∞VE (${raffleStates.active.length}): Hen√ºz bitmemi≈ü`);
  raffleStates.active.forEach(r => {
    console.log(`   - #${r.id}: ${r.title} (${r.ticketsSold}/${r.maxTickets} bilet, biti≈ü: ${r.expirationDate})`);
  });
  
  console.log(`üü° S√úRESƒ∞ Bƒ∞TMƒ∞≈û AMA KAZANAN YOK (${raffleStates.expired_no_winner.length}): Fƒ∞NALƒ∞ZATƒ∞ON GEREKLƒ∞`);
  raffleStates.expired_no_winner.forEach(r => {
    console.log(`   - #${r.id}: ${r.title} (${r.ticketsSold} bilet, ${r.expirationDate})`);
  });
  
  console.log(`‚úÖ Bƒ∞TMƒ∞≈û (${raffleStates.finished.length}): Kazananƒ± var, Fƒ∞NALƒ∞ZE EDƒ∞LMƒ∞≈û`);
  raffleStates.finished.forEach(r => {
    console.log(`   - #${r.id}: ${r.title} (Kazanan: ${r.winner.substring(0, 10)}...)`);
  });
  
  console.log(`‚ùå ƒ∞PTAL EDƒ∞LMƒ∞≈û (${raffleStates.cancelled.length}): Status = 2`);
  raffleStates.cancelled.forEach(r => {
    console.log(`   - #${r.id}: ${r.title}`);
  });
  
  console.log(`‚ö™ Bƒ∞LETSƒ∞Z (${raffleStates.no_tickets.length}): Hi√ß bilet satƒ±lmamƒ±≈ü`);
  raffleStates.no_tickets.forEach(r => {
    console.log(`   - #${r.id}: ${r.title}`);
  });
  
  console.log("");
  console.log("üí∏ Fƒ∞NALƒ∞ZER WASTE ANALƒ∞Zƒ∞:");
  console.log("‚îÅ".repeat(50));
  
  const needsFinalization = raffleStates.expired_no_winner.length;
  const alreadyFinished = raffleStates.finished.length;
  
  console.log(`üéØ Finalize edilmesi gereken: ${needsFinalization} raffle`);
  console.log(`‚úÖ Zaten finalize edilmi≈ü: ${alreadyFinished} raffle`);
  console.log("");
  
  console.log("üí∞ MALIYET HESABI:");
  console.log(`   Gerekli finalization: ${needsFinalization} √ó 0.526 MON = ${(needsFinalization * 0.526).toFixed(1)} MON`);
  console.log(`   üö® EƒûER bitmi≈ü raffles'leri tekrar process ederse:`);
  console.log(`   ƒ∞sraf: ${alreadyFinished} √ó 0.526 MON = ${(alreadyFinished * 0.526).toFixed(1)} MON WASTE!`);
  console.log("");
  
  console.log("üîç Fƒ∞NALƒ∞ZER SCRIPT LOGƒ∞ƒûƒ∞:");
  console.log("‚îÅ".repeat(50));
  console.log("Finalizer script ≈üu ko≈üullarda raffle process eder:");
  console.log("1. ‚úÖ Expired + Winner yok + Bilet var ‚Üí GEREKLƒ∞");
  console.log("2. ‚úÖ Sold out + Winner yok + Bilet var ‚Üí GEREKLƒ∞");  
  console.log("3. ‚ùå Winner var (finished) ‚Üí GEREKSIZ (WASTE!)");
  console.log("4. ‚ùå Bilet yok ‚Üí GEREKSIZ");
  console.log("");
  
  if (alreadyFinished > 0) {
    console.log("üö® WASTE Rƒ∞SKƒ∞:");
    console.log(`   ${alreadyFinished} raffle zaten bitmi≈ü (winner var)`);
    console.log("   Finalizer bunlarƒ± tekrar process etmemeli!");
    console.log(`   Eƒüer bug varsa: ${(alreadyFinished * 0.526).toFixed(1)} MON israf olur`);
  } else {
    console.log("‚úÖ ƒ∞Yƒ∞ HABER:");
    console.log("   Hen√ºz bitmi≈ü raffle yok, waste riski d√º≈ü√ºk");
  }
  
  console.log("");
  console.log("üìà PLATFORM B√úY√úY√úNCE:");
  console.log("‚îÅ".repeat(50));
  console.log("üîÑ 100 raffle olu≈üsa:");
  console.log(`   - 80 bitmi≈ü, 20 finalize gerekli`);
  console.log(`   - Gerekli cost: 20 √ó 0.526 = 10.5 MON`);
  console.log(`   - Bug varsa waste: 80 √ó 0.526 = 42.1 MON!`);
  console.log("");
  console.log("üîß √ñNERƒ∞:");
  console.log("   Finalizer'da kesin kontrol:");
  console.log("   if (raffle.winner != 0x0) skip; // Zaten bitmi≈ü");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå", error);
    process.exit(1);
  }); 